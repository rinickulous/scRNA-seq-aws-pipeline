/*
========================================================================================
    scRNA-seq Pipeline Configuration
========================================================================================
*/

// Global default params
params {
    // Input/output options
    input                      = null
    outdir                     = './results'
    tracedir                   = "${params.outdir}/pipeline_info"
    
    // Reference genome options
    reference                  = null
    fasta                      = null
    gtf                        = null
    genome_name                = 'custom_genome'
    
    // AWS options
    awsregion                  = 'us-east-1'
    awsqueue                   = null
    awscli                     = '/home/ec2-user/miniconda/bin/aws'
    
    // Max resource options (for AWS Batch)
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
    
    // Pipeline options
    help                       = false
    version                    = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes'
}

// Load base config
includeConfig 'conf/base.config'

// Load profiles
profiles {
  aws {
    process.executor = 'awsbatch'
    process.queue    = 'scrna-seq-job-queue'
    aws.region       = 'us-east-1'
    docker.enabled   = true
    workDir          = 's3://scrna-pipeline-nwhite-work/work'
    aws.batch.jobRole = 'arn:aws:iam::435455014187:role/scrnaSeqBatchJobRole'
  }
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
    }
    
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
    }
    
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
    }
    
    awsbatch {
        includeConfig 'conf/awsbatch.config'
    }
    
    test {
        includeConfig 'conf/test.config'
    }
}


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Timeline and report
def timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${timestamp}.html"
}

manifest {
    name            = 'scRNA-seq-aws-pipeline'
    author          = 'Nicholas White'
    homePage        = 'https://github.com/rinickulous/scRNA-seq-aws-pipeline'
    description     = 'scRNA-seq analysis pipeline with AWS integration'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '1.0.0'
}

// Function to ensure that resource requirements don't exceed max
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}